openapi: 3.0.0
info:
  title: Perfume Store API
  version: 1.0.0
  description: API documentation for the Perfume Store
servers:
  - url: http://localhost:5000/api
    description: Development server

paths:
  # Authentication Routes
  /auth/login:
    post:
      tags:
        - Auth
      summary: Login user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        200:
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        401:
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /auth/register:
    post:
      tags:
        - Auth
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        201:
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # User Profile Routes
  /users/profile:
    get:
      tags:
        - User
      summary: Get user profile
      security:
        - BearerAuth: []
      responses:
        200:
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - User
      summary: Update user profile
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
            example:
              firstName: 'John'
              lastName: 'Doe'
              phone: '+1234567890'
      responses:
        200:
          description: User profile updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              example:
                id: '1'
                email: 'john.doe@example.com'
                username: 'john.doe'
                firstName: 'John'
                lastName: 'Doe'
                phone: '+1234567890'
                role: 'USER'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Error updating profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # Address Routes
  /address:
    get:
      tags:
        - Address
      summary: Get user addresses
      security:
        - BearerAuth: []
      responses:
        200:
          description: Addresses retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Address'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - Address
      summary: Add a new address
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddressRequest'
      responses:
        201:
          description: Address added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Address'
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /address/{id}:
    put:
      tags:
        - Address
      summary: Update an address
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: Address ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddressRequest'
      responses:
        200:
          description: Address updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Address'
        404:
          description: Address not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - Address
      summary: Delete an address
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: Address ID
      responses:
        204:
          description: Address deleted successfully
        404:
          description: Address not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # Product Routes
  /products:
    get:
      tags:
        - Products
      summary: Get all products
      responses:
        200:
          description: List of products
          content:
            application/json:
              schema:
                type: object
                properties:
                  products:
                    type: array
                    items:
                      $ref: '#/components/schemas/Product'
  
  /products/filter:
    get:
      tags:
        - Products
      summary: Get filtered products
      parameters:
        - in: query
          name: category
          schema:
            type: string
          description: Filter products by category slug
        - in: query
          name: brand
          schema:
            type: string
          description: Filter products by brand name
        - in: query
          name: minPrice
          schema:
            type: number
          description: Minimum price filter
        - in: query
          name: maxPrice
          schema:
            type: number
          description: Maximum price filter
        - in: query
          name: featured
          schema:
            type: boolean
          description: Filter featured products
        - in: query
          name: bestseller
          schema:
            type: boolean
          description: Filter bestseller products
        - in: query
          name: sort
          schema:
            type: string
            enum: [price_asc, price_desc]
          description: Sort products by price (ascending or descending)
      responses:
        200:
          description: List of filtered products
          content:
            application/json:
              schema:
                type: object
                properties:
                  products:
                    type: array
                    items:
                      $ref: '#/components/schemas/Product'

  /products/{slug}:
    get:
      tags:
        - Products
      summary: Get a product by slug
      parameters:
        - in: path
          name: slug
          required: true
          schema:
            type: string
          description: Product slug
      responses:
        200:
          description: Product details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        404:
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /categories:
    get:
      tags:
        - Categories
      summary: Get all categories
      responses:
        200:
          description: List of categories
          content:
            application/json:
              schema:
                type: object
                properties:
                  categories:
                    type: array
                    items:
                      $ref: '#/components/schemas/Category'

  # Order Routes (Admin)
  /admin/dashboard:
    get:
      tags:
        - Admin
      summary: Get dashboard statistics
      security:
        - BearerAuth: []
      responses:
        200:
          description: Dashboard statistics retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  totalUsers:
                    type: integer
                  totalProducts:
                    type: integer
                  totalOrders:
                    type: integer
                  totalSales:
                    type: number
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /admin/users:
    get:
      tags:
        - Admin
      summary: Get all users
      security:
        - BearerAuth: []
      responses:
        200:
          description: List of users retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /admin/users/{userId}/role:
    patch:
      tags:
        - Admin
      summary: Update user role
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: integer
          description: User ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                role:
                  type: string
                  enum: [USER, ADMIN]
              required:
                - role
      responses:
        200:
          description: User role updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /admin/products/{productId}:
    patch:
      tags:
        - Admin
      summary: Update a product
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: productId
          required: true
          schema:
            type: integer
          description: Product ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProductRequest'
      responses:
        200:
          description: Product updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /admin/orders:
    get:
      tags:
        - Admin
      summary: Get all orders
      security:
        - BearerAuth: []
      responses:
        200:
          description: List of all orders retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /admin/orders/{orderId}:
    patch:
      tags:
        - Admin
      summary: Update order status
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: orderId
          required: true
          schema:
            type: integer
          description: Order ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateOrderStatusRequest'
      responses:
        200:
          description: Order status updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # Cart Routes
  /cart:
    get:
      tags:
        - Cart
      summary: Get user cart
      security:
        - BearerAuth: []
      responses:
        200:
          description: User cart retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /cart/total:
    get:
      tags:
        - Cart
      summary: Get cart total
      security:
        - BearerAuth: []
      responses:
        200:
          description: Cart total retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  total:
                    type: number
                  itemCount:
                    type: integer
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/CartItem'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /cart/add:
    post:
      tags:
        - Cart
      summary: Add item to cart
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddToCartRequest'
      responses:
        200:
          description: Item added to cart successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /cart/checkout:
    post:
      tags:
        - Cart
      summary: Create a new order from the cart
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrderRequest'
      responses:
        201:
          description: Order created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateOrderResponse'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /cart/remove/{itemId}:
    delete:
      tags:
        - Cart
      summary: Remove item from cart
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: itemId
          required: true
          schema:
            type: integer
          description: Cart Item ID
      responses:
        200:
          description: Item removed from cart successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # Wishlist Routes
  /wishlist:
    get:
      tags:
        - Wishlist
      summary: Get user wishlist
      security:
        - BearerAuth: []
      responses:
        200:
          description: Wishlist retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WishlistItem'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /wishlist/toggle/{productId}:
    post:
      tags:
        - Wishlist
      summary: Toggle product in wishlist
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: productId
          required: true
          schema:
            type: integer
          description: Product ID
      responses:
        200:
          description: Wishlist updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  added:
                    type: boolean
                  product:
                    $ref: '#/components/schemas/Product'
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # Review Routes
  /reviews:
    post:
      tags:
        - Reviews
      summary: Create a new review
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateReviewRequest'
      responses:
        201:
          description: Review created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /reviews/{productId}:
    get:
      tags:
        - Reviews
      summary: Get reviews for a product
      parameters:
        - in: path
          name: productId
          required: true
          schema:
            type: string
          description: Product ID
      responses:
        200:
          description: Product reviews retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  reviews:
                    type: array
                    items:
                      $ref: '#/components/schemas/Review'
                  stats:
                    type: array
                    items:
                      type: object
                      properties:
                        rating:
                          type: integer
                        count:
                          type: integer
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    # User Schemas
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the user
        email:
          type: string
          format: email
          description: User's email address
        username:
          type: string
          minLength: 3
          maxLength: 30
          description: User's chosen username
        firstName:
          type: string
          description: User's first name
        lastName:
          type: string
          description: User's last name
        phone:
          type: string
          pattern: '^\+?[1-9]\d{1,14}$'
          description: Phone number in international format
        role:
          type: string
          enum: [USER, ADMIN]
          description: User's role in the system
      required:
        - id
        - email
        - firstName
        - lastName
        - role

    LoginRequest:
      type: object
      required:
        - login
        - password
      properties:
        login:
          type: string
          description: Email or username
        password:
          type: string
          format: password

    LoginResponse:
      type: object
      properties:
        token:
          type: string
          description: JWT token for authentication
        user:
          $ref: '#/components/schemas/User'

    RegisterRequest:
      type: object
      required:
        - email
        - password
        - firstName
        - lastName
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password
        firstName:
          type: string
        lastName:
          type: string
        username:
          type: string
        phone:
          type: string

    UpdateUserRequest:
      type: object
      properties:
        firstName:
          type: string
          description: User's first name
        lastName:
          type: string
          description: User's last name
        phone:
          type: string
          pattern: '^\+?[1-9]\d{1,14}$'
          description: Phone number in international format

    # Address Schemas
    Address:
      type: object
      properties:
        id:
          type: integer
          description: Address ID
        street:
          type: string
        city:
          type: string
        state:
          type: string
        postalCode:
          type: string
        country:
          type: string
        isDefault:
          type: boolean
      required:
        - street
        - city
        - state
        - postalCode
        - country

    AddressRequest:
      type: object
      properties:
        street:
          type: string
        city:
          type: string
        state:
          type: string
        postalCode:
          type: string
        country:
          type: string
        isDefault:
          type: boolean
      required:
        - street
        - city
        - state
        - postalCode
        - country

    # Product Schemas
    Product:
      type: object
      required:
        - id
        - name
        - slug
        - brand
        - price
        - volume
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the product
        name:
          type: string
          minLength: 2
          maxLength: 100
          description: Name of the perfume
        slug:
          type: string
          pattern: '^[a-z0-9]+(?:-[a-z0-9]+)*$'
          description: URL-friendly version of the name
        brand:
          type: string
          description: Brand/manufacturer name
        category_id:
          type: integer
          description: ID of the product category
        description:
          type: string
          description: Detailed product description
        price:
          type: number
          format: float
          minimum: 0
          description: Product price in your currency
        volume:
          type: string
          description: Volume of the perfume (e.g., '100ml')
        fragrance_notes:
          type: object
          properties:
            top:
              type: array
              items:
                type: string
            middle:
              type: array
              items:
                type: string
            base:
              type: array
              items:
                type: string
          description: Fragrance pyramid notes
        stock_quantity:
          type: integer
          minimum: 0
          description: Available stock quantity
        is_featured:
          type: boolean
          description: Whether the product is featured
        is_bestseller:
          type: boolean
          description: Whether the product is a bestseller
        image:
          type: string
          format: uri
          description: URL to product image

    UpdateProductRequest:
      type: object
      properties:
        name:
          type: string
        slug:
          type: string
          pattern: '^[a-z0-9]+(?:-[a-z0-9]+)*$'
        brand:
          type: string
        category_id:
          type: integer
        description:
          type: string
        price:
          type: number
          format: float
          minimum: 0
        volume:
          type: string
        fragrance_notes:
          type: object
          properties:
            top:
              type: array
              items:
                type: string
            middle:
              type: array
              items:
                type: string
            base:
              type: array
              items:
                type: string
        stock_quantity:
          type: integer
          minimum: 0
        is_featured:
          type: boolean
        is_bestseller:
          type: boolean
        image:
          type: string
          format: uri

    # Category Schemas
    Category:
      type: object
      required:
        - id
        - name
        - slug
      properties:
        id:
          type: integer
          description: Unique identifier for the category
        name:
          type: string
          description: Name of the category
        slug:
          type: string
          pattern: '^[a-z0-9]+(?:-[a-z0-9]+)*$'
          description: URL-friendly version of the category name
        description:
          type: string
          description: Category description

    # Order Schemas
    Order:
      type: object
      properties:
        id:
          type: integer
          description: Order ID
        userId:
          type: integer
          description: User ID who placed the order
        shippingAddress:
          $ref: '#/components/schemas/Address'
        status:
          type: string
          enum: [PENDING, CONFIRMED, PROCESSING, SHIPPED, DELIVERED, CANCELLED]
        subtotal:
          type: number
          format: float
        discountAmount:
          type: number
          format: float
        total:
          type: number
          format: float
        paymentMethod:
          type: string
          enum: [CASH_ON_DELIVERY, BANK_TRANSFER, STORE_PICKUP]
        paymentStatus:
          type: string
          enum: [PENDING, COMPLETED, FAILED]
        discountCode:
          type: string
          nullable: true
        trackingNumber:
          type: string
          nullable: true
        adminNotes:
          type: string
          nullable: true
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItem'
      required:
        - id
        - userId
        - shippingAddress
        - status
        - subtotal
        - discountAmount
        - total
        - paymentMethod
        - paymentStatus
        - createdAt
        - updatedAt

    OrderItem:
      type: object
      properties:
        id:
          type: integer
          description: Order Item ID
        orderId:
          type: integer
          description: Associated Order ID
        product:
          $ref: '#/components/schemas/Product'
        quantity:
          type: integer
          minimum: 1
        price:
          type: number
          format: float
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - id
        - orderId
        - product
        - quantity
        - price
        - createdAt
        - updatedAt

    CreateOrderRequest:
      type: object
      required:
        - addressId
        - paymentMethod
        - items
      properties:
        addressId:
          type: integer
          description: ID of the shipping address
        paymentMethod:
          type: string
          enum: [CASH_ON_DELIVERY, BANK_TRANSFER, STORE_PICKUP]
        items:
          type: array
          minItems: 1
          items:
            type: object
            properties:
              productId:
                type: integer
                description: Product ID
              quantity:
                type: integer
                minimum: 1
                description: Quantity of the product
        discountCode:
          type: string
          nullable: true

    CreateOrderResponse:
      type: object
      properties:
        message:
          type: string
        order:
          $ref: '#/components/schemas/Order'
      required:
        - message
        - order

    UpdateOrderStatusRequest:
      type: object
      required:
        - status
      properties:
        status:
          type: string
          enum: [PENDING, CONFIRMED, PROCESSING, SHIPPED, DELIVERED, CANCELLED]

    # Cart Schemas
    Cart:
      type: object
      properties:
        id:
          type: integer
          description: Cart ID
        userId:
          type: integer
          description: User ID
        items:
          type: array
          items:
            $ref: '#/components/schemas/CartItem'
      required:
        - id
        - userId
        - items

    CartItem:
      type: object
      properties:
        id:
          type: integer
          description: Cart Item ID
        cartId:
          type: integer
          description: Associated Cart ID
        product:
          $ref: '#/components/schemas/Product'
        quantity:
          type: integer
          minimum: 1
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - id
        - cartId
        - product
        - quantity
        - createdAt
        - updatedAt

    AddToCartRequest:
      type: object
      required:
        - productId
        - quantity
      properties:
        productId:
          type: integer
          description: ID of the product to add
        quantity:
          type: integer
          minimum: 1
          description: Quantity of the product

    # Wishlist Schemas
    WishlistItem:
      type: object
      required:
        - id
        - userId
        - productId
      properties:
        id:
          type: integer
          description: Wishlist Item ID
        userId:
          type: integer
          description: User ID
        productId:
          type: integer
          description: Product ID
        createdAt:
          type: string
          format: date-time

    # Review Schemas
    Review:
      type: object
      properties:
        id:
          type: integer
          description: Review ID
        userId:
          type: string
          format: uuid
          description: User ID who wrote the review
        productId:
          type: integer
          description: Product ID being reviewed
        rating:
          type: integer
          minimum: 1
          maximum: 5
        comment:
          type: string
        isVerified:
          type: boolean
        createdAt:
          type: string
          format: date-time
      required:
        - id
        - userId
        - productId
        - rating
        - comment
        - isVerified
        - createdAt

    CreateReviewRequest:
      type: object
      required:
        - productId
        - rating
        - comment
      properties:
        productId:
          type: integer
          description: ID of the product to review
        rating:
          type: integer
          minimum: 1
          maximum: 5
          description: Rating given by the user
        comment:
          type: string
          description: Review comment

    # Error Schema
    Error:
      type: object
      properties:
        error:
          type: string
          description: Error message
      example:
        error: 'Product not found'

    # Additional Schemas
    # Add any additional schemas as needed (e.g., for Orders, OrderItems, etc.)

security:
  - BearerAuth: []
