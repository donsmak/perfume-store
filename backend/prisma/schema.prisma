generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                   Int       @id @default(autoincrement())
  email                String    @unique
  password             String
  firstName            String
  lastName             String
  phone                String
  role                 String    @default("USER")
  isEmailVerified      Boolean   @default(false)
  verificationToken    String?
  resetPasswordToken   String?
  resetPasswordExpires DateTime?
  addresses            Address[]
  orders              Order[]
  cart                Cart?
  createdAt           DateTime   @default(now())
  updatedAt           DateTime   @updatedAt
}

model Product {
  id            Int         @id @default(autoincrement())
  name          String
  description   String
  slug          String      @unique
  brand         String
  price         Float
  stockQuantity Int
  volume        String
  image         String
  isFeatured    Boolean   @default(false)
  isBestseller  Boolean   @default(false)
  categoryId    Int
  category      Category  @relation(fields: [categoryId], references: [id])
  cartItems     CartItem[]
  orderItems    OrderItem[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([categoryId])
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String
  description String
  slug        String    @unique
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Cart {
  id            Int           @id @default(autoincrement())
  userId        Int?          @unique
  user          User?         @relation(fields: [userId], references: [id])
  guestSession  GuestSession? @relation(fields: [sessionId], references: [id])
  sessionId     String?       @unique
  items         CartItem[]
  total         Float         @default(0)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@index([userId])
  @@index([sessionId])
}

model CartItem {
  id        Int      @id @default(autoincrement())
  cartId    Int
  cart      Cart     @relation(fields: [cartId], references: [id])
  productId Int
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int
  price     Float    @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([cartId, productId])
  @@index([cartId])
  @@index([productId])
}

model Order {
  id          Int         @id @default(autoincrement())
  userId      Int
  user        User        @relation(fields: [userId], references: [id])
  addressId   Int
  address     Address     @relation(fields: [addressId], references: [id])
  status      String      @default("PENDING") // PENDING, PROCESSING, SHIPPED, DELIVERED, CANCELLED
  total       Float
  orderItems  OrderItem[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([userId])
  @@index([addressId])
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  orderId   Int
  order     Order    @relation(fields: [orderId], references: [id])
  productId Int
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([orderId])
  @@index([productId])
}

model Address {
  id         Int      @id @default(autoincrement())
  userId     Int
  user       User     @relation(fields: [userId], references: [id])
  street     String
  city       String
  state      String?
  postalCode String?
  country    String   @default("Morocco")
  isDefault  Boolean  @default(false)
  orders     Order[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([userId])
}

model GuestSession {
  id        String      @id
  cart      Cart?     
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}
